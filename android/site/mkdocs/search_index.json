{
    "docs": [
        {
            "location": "/", 
            "text": "Locarta Android SDK\n\n\n\n\n\n\n\n\nLatest Version\n\n\nSize\n\n\nMinimal Android API verison\n\n\nRelease Date\n\n\n\n\n\n\n\n\n\n\n1.3.0\n\n\n457 KB\n\n\n7 (2.1  Eclair)\n\n\n31/10/2016\n\n\n\n\n\n\n\n\nSetup\n\n\n\n\n1) Declare dependencies\n\n\nOpen the \nbuild.gradle\n file of your project and update the repository and dependency blocks as follows:\n\n\n     repositories {\n        // ... other project repositories\n        maven {\n            url \nhttp://nexus.locarta.co/content/repositories/android-sdk/\n\n            credentials {\n               username = \n$YOUR_USERNAME$\n\n               password = \n$YOUR_PASSWORD$\n\n            }\n        }\n        // Repository will be provided separately\n     }\n     // ...\n     dependencies {\n        // ... other project dependencies\n        // We recommend to set version as: 1.3.+\n        compile (\nco.locarta:locarta-sdk:$LOCARTA_SDK_VERSION$:pubProd@aar\n) {\n            transitive = true;\n        }\n     }\n\n\n\n\nWhere \n$YOUR_USERNAME$\n and \n$YOUR_PASSWORD$\n are the credentials to the nexus repository.\n\nThey match with the credentials you got to get access to this documentation\n.\n\n\n$LOCARTA_SDK_VERSION$\n is the SDK version number you wish to use.\nSync \nbuild.gradle\n, rebuild your project and import \nco.locarta.sdk.LocartaSDK\n into your app.\n\n\nWe advise to use \nhttps\n in the repository url (e.g. `https://nexus.locarta.co/..., we intentinally keep http to avoid certain problems with specific java versions.)\n\n\n2) Set Publisher Key\n\n\nAdd a \nmeta-data\n tag to the \nAndroidManifest.xml\n of your project:\n\n\n    \napplication\n\n        \n!-- other content --\n\n        \nmeta-data\n               android:name=\nco.locarta.sdk.pid\n\n               android:value=\nYOUR_PUBLISHER_ID\n /\n        \n    \n/application\n\n\n\n\n\nwhere \nYOUR_PUBLISHER_ID\n is your Locarta publisher id.\n\n\n3) Initialise SDK on App Start\n\n\nYou need to initialise the Locarta SDK only once \u2013 on app start:\n\n\n    // Add this line to the header of your file\n    import co.locarta.sdk.LocartaSdk;\n    public class SdkDemoApplication extends Application {\n        @Override\n        public void onCreate() {\n            super.onCreate();\n            // Initialise SDK on App creation\n            LocartaSdk.initialize(getApplicationContext());\n        }\n    }\n\n\n\n\n4) Obtain User Opt-In\n\n\nThe SDK will not start working until the user has opted in \u2013 this needs to be done only once per user. There are two ways to do it, depending on how the opt-in is gathered:\n\n\na) Implicit opt-in (if you've added Locarta info to your app's privacy policy):\n\n\n    // Put this code in your Application.onCreate() function, after LocartaSdk.initialize()\n    if(!LocartaSDK.isAgreementAccepted(getContext())) {\n        LocartaSDK.setAgreementAccepted(getContext(), true);\n    }\n\n\n\n\na) Explicit opt-in (if you want to show a popup agreement dialog prompting users to opt in):\n\n\n    // Put this code somewhere in the main activities to show the dialog\n    LocartaSdk.showAgreementDialog(getActivity());\n\n\n\n\nIf you want to check whether the user has opted in, call:\n\n\n    // The call returns true or false if user accepted terms or not\n    LocartaSDK.isAgreementAccepted(getContext());        \n\n\n\n\nYou can also check whether user saw an agreement dialog:\n\n\n    // The call returns TermStatus enum\n    LocartaSDK.getAgreementStatus(getContext());\n\n\n\n\n5) User Opt-Out\n\n\nIf you need to turn off SDK manually and do not allow it to restart, you can use the following method:\n\n\n   LocartaSDK.setAgreementAccepted(getContext(), false);\n\n\n\n\n6) Push notifications\n\n\nIf you use Google Cloud Messaging to send push notifications to your application, please\ncall this method to split the SDK's notifications from yours:\n\n\n   // Returns *true* if push notification is addressed to SDK\n   LocartaSdk.handleMessage(Bundle bundle);\n\n\n\n\nPlease ignore the push notifications addressed to the SDK in your receiver:\n\n\npublic class AppGcmListenerService extends GcmListenerService {\n\n    @Override\n    public void onMessageReceived(String from, Bundle bundle) {\n        if (!LocartaSdk.handleMessage(bundle)) { \n          // Normal push notification, your logic comes here\n            Log.i(\nAppGcmListenerService\n, String.format(\nReceived message from %s with data %s\n, from, bundle));\n        } else {\n          // just ignore this push notification, it is addressed to the SDK\n        }\n    }\n\n}\n\n\n\n\nIntegration Information\n\n\n\n\nBy default the host app \nshould not\n be setting any additional permissions in its manifest.\n\n\nIn case Target SDK Version \n= 23 we rely on the fact that \nAccess Fine Location\n / \nAccess Coarse Location\n permisions are handeled by the host app (e.g. pop-out permission dialog is shown to the user).\n\n\nThe set of minimal permissions embedded in the Locarta SDK is:\n\n\n\n\n\n\n\n\nPermission Name\n\n\nPlain English Name in App\n\n\nPlain German Name in App\n\n\n\n\n\n\n\n\n\n\nandroid.permission.INTERNET\n\n\nFull network access\n\n\nZugriff auf alle Netzwerke\n\n\n\n\n\n\nandroid.permission.ACCESS_FINE_LOCATION\n\n\nPrecise location\n\n\nGenauer Standort\n\n\n\n\n\n\nandroid.permission.ACCESS_COARSE_LOCATION\n\n\nApproximate location\n\n\nUngef\u00e4hrer Standort\n\n\n\n\n\n\nandroid.permission.ACCESS_NETWORK_STATE\n\n\nView network connections\n\n\nNetzwerkverbindungen abrufen\n\n\n\n\n\n\nandroid.permission.ACCESS_WIFI_STATE\n\n\nView wifi connections\n\n\nWLAN-Verbindungen abrufen\n\n\n\n\n\n\nandroid.permission.CHANGE_WIFI_STATE\n\n\nConnect and disconnect from Wi-Fi\n\n\nWLAN-Verbindungen herstellen und trennen\n\n\n\n\n\n\n\n\nProguard\n\n\nProguard rules are already configured for the Locarta SDK. No additional steps need to be taken in your application.\n\n\nPerformance Impact\n\n\nWe expect a battery impact of roughly 2-3%.\n\n\nNormally we use about 1MB/week of mobile data (depending on how long the phone is connected to wifi).\n\n\n3rd-Party Dependencies\n\n\nThe Locarta SDK should be implemented as a transitive @aar dependency. These are the 3rd-party dependencies it uses:\n\n\n\n\n\n\n\n\nDependency\n\n\nVersion\n\n\n\n\n\n\n\n\n\n\ncom.google.android.gms:play-services-location\n\n\n9.6.1\n\n\n\n\n\n\ncom.google.android.gms:play-services-gcm\n\n\n9.6.1\n\n\n\n\n\n\ncom.google.code.gson:gson\n\n\n2.7\n\n\n\n\n\n\nio.reactivex:rxjava\n\n\n1.1.8\n\n\n\n\n\n\ncom.squareup.retrofit2:retrofit\n\n\n2.1.0\n\n\n\n\n\n\ncom.squareup.retrofit2:converter-gson\n\n\n2.1.0\n\n\n\n\n\n\nde.greenrobot:eventbus\n\n\n3.0.0\n\n\n\n\n\n\ncom.google.dagger:dagger\n\n\n2.0\n\n\n\n\n\n\nch.hsr:geohash\n\n\n1.0.13\n\n\n\n\n\n\ncom.google.protobuf\n\n\n3.0.0\n\n\n\n\n\n\n\n\n\n\nTroubleshooting\n\n\nProguard\n\n\nIf you see the message: \nCan't find referenced class from the SDK\n, add these lines to your proguard configuration:\n\n\n-dontwarn co.pointwise.proto.JournalProto$.**\n-dontwarn com.google.common.base.Function\n-dontwarn com.google.common.collect.Lists\n-dontwarn com.google.common.io.BaseEncoding\n\n\n\n\nDowngrading min SDK version to API v7\n\n\nTechnically the minimum API version for the SDK is already v7. However, it depends on Google Play Services, which requires minimum API v9.\n\n\nIf you get an error saying:\n\n\nManifest merger failed : uses-sdk:minSdkVersion 7 cannot be smaller than version 9 declared in library [com.google.android.gms:play-services-location:9.4.0] Suggestion: use tools:overrideLibrary=\ncom.google.android.gms\n to force usage\n\n\n\n\nThen add this line to the manifest of your application:\n\n\nuses-sdk tools:overrideLibrary=\ncom.google.android.gms, com.google.android.gms.base, com.google.android.gms.tasks, com.google.android.gms.gcm, com.google.android.gms.iid\n/", 
            "title": "Home"
        }, 
        {
            "location": "/#locarta-android-sdk", 
            "text": "Latest Version  Size  Minimal Android API verison  Release Date      1.3.0  457 KB  7 (2.1  Eclair)  31/10/2016", 
            "title": "Locarta Android SDK"
        }, 
        {
            "location": "/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/#1-declare-dependencies", 
            "text": "Open the  build.gradle  file of your project and update the repository and dependency blocks as follows:       repositories {\n        // ... other project repositories\n        maven {\n            url  http://nexus.locarta.co/content/repositories/android-sdk/ \n            credentials {\n               username =  $YOUR_USERNAME$ \n               password =  $YOUR_PASSWORD$ \n            }\n        }\n        // Repository will be provided separately\n     }\n     // ...\n     dependencies {\n        // ... other project dependencies\n        // We recommend to set version as: 1.3.+\n        compile ( co.locarta:locarta-sdk:$LOCARTA_SDK_VERSION$:pubProd@aar ) {\n            transitive = true;\n        }\n     }  Where  $YOUR_USERNAME$  and  $YOUR_PASSWORD$  are the credentials to the nexus repository. They match with the credentials you got to get access to this documentation .  $LOCARTA_SDK_VERSION$  is the SDK version number you wish to use.\nSync  build.gradle , rebuild your project and import  co.locarta.sdk.LocartaSDK  into your app.  We advise to use  https  in the repository url (e.g. `https://nexus.locarta.co/..., we intentinally keep http to avoid certain problems with specific java versions.)", 
            "title": "1) Declare dependencies"
        }, 
        {
            "location": "/#2-set-publisher-key", 
            "text": "Add a  meta-data  tag to the  AndroidManifest.xml  of your project:       application \n         !-- other content -- \n         meta-data\n               android:name= co.locarta.sdk.pid \n               android:value= YOUR_PUBLISHER_ID  /         \n     /application   where  YOUR_PUBLISHER_ID  is your Locarta publisher id.", 
            "title": "2) Set Publisher Key"
        }, 
        {
            "location": "/#3-initialise-sdk-on-app-start", 
            "text": "You need to initialise the Locarta SDK only once \u2013 on app start:      // Add this line to the header of your file\n    import co.locarta.sdk.LocartaSdk;\n    public class SdkDemoApplication extends Application {\n        @Override\n        public void onCreate() {\n            super.onCreate();\n            // Initialise SDK on App creation\n            LocartaSdk.initialize(getApplicationContext());\n        }\n    }", 
            "title": "3) Initialise SDK on App Start"
        }, 
        {
            "location": "/#4-obtain-user-opt-in", 
            "text": "The SDK will not start working until the user has opted in \u2013 this needs to be done only once per user. There are two ways to do it, depending on how the opt-in is gathered:  a) Implicit opt-in (if you've added Locarta info to your app's privacy policy):      // Put this code in your Application.onCreate() function, after LocartaSdk.initialize()\n    if(!LocartaSDK.isAgreementAccepted(getContext())) {\n        LocartaSDK.setAgreementAccepted(getContext(), true);\n    }  a) Explicit opt-in (if you want to show a popup agreement dialog prompting users to opt in):      // Put this code somewhere in the main activities to show the dialog\n    LocartaSdk.showAgreementDialog(getActivity());  If you want to check whether the user has opted in, call:      // The call returns true or false if user accepted terms or not\n    LocartaSDK.isAgreementAccepted(getContext());          You can also check whether user saw an agreement dialog:      // The call returns TermStatus enum\n    LocartaSDK.getAgreementStatus(getContext());", 
            "title": "4) Obtain User Opt-In"
        }, 
        {
            "location": "/#5-user-opt-out", 
            "text": "If you need to turn off SDK manually and do not allow it to restart, you can use the following method:     LocartaSDK.setAgreementAccepted(getContext(), false);", 
            "title": "5) User Opt-Out"
        }, 
        {
            "location": "/#6-push-notifications", 
            "text": "If you use Google Cloud Messaging to send push notifications to your application, please\ncall this method to split the SDK's notifications from yours:     // Returns *true* if push notification is addressed to SDK\n   LocartaSdk.handleMessage(Bundle bundle);  Please ignore the push notifications addressed to the SDK in your receiver:  public class AppGcmListenerService extends GcmListenerService {\n\n    @Override\n    public void onMessageReceived(String from, Bundle bundle) {\n        if (!LocartaSdk.handleMessage(bundle)) { \n          // Normal push notification, your logic comes here\n            Log.i( AppGcmListenerService , String.format( Received message from %s with data %s , from, bundle));\n        } else {\n          // just ignore this push notification, it is addressed to the SDK\n        }\n    }\n\n}", 
            "title": "6) Push notifications"
        }, 
        {
            "location": "/#integration-information", 
            "text": "By default the host app  should not  be setting any additional permissions in its manifest.  In case Target SDK Version  = 23 we rely on the fact that  Access Fine Location  /  Access Coarse Location  permisions are handeled by the host app (e.g. pop-out permission dialog is shown to the user).  The set of minimal permissions embedded in the Locarta SDK is:     Permission Name  Plain English Name in App  Plain German Name in App      android.permission.INTERNET  Full network access  Zugriff auf alle Netzwerke    android.permission.ACCESS_FINE_LOCATION  Precise location  Genauer Standort    android.permission.ACCESS_COARSE_LOCATION  Approximate location  Ungef\u00e4hrer Standort    android.permission.ACCESS_NETWORK_STATE  View network connections  Netzwerkverbindungen abrufen    android.permission.ACCESS_WIFI_STATE  View wifi connections  WLAN-Verbindungen abrufen    android.permission.CHANGE_WIFI_STATE  Connect and disconnect from Wi-Fi  WLAN-Verbindungen herstellen und trennen", 
            "title": "Integration Information"
        }, 
        {
            "location": "/#proguard", 
            "text": "Proguard rules are already configured for the Locarta SDK. No additional steps need to be taken in your application.", 
            "title": "Proguard"
        }, 
        {
            "location": "/#performance-impact", 
            "text": "We expect a battery impact of roughly 2-3%.  Normally we use about 1MB/week of mobile data (depending on how long the phone is connected to wifi).", 
            "title": "Performance Impact"
        }, 
        {
            "location": "/#3rd-party-dependencies", 
            "text": "The Locarta SDK should be implemented as a transitive @aar dependency. These are the 3rd-party dependencies it uses:     Dependency  Version      com.google.android.gms:play-services-location  9.6.1    com.google.android.gms:play-services-gcm  9.6.1    com.google.code.gson:gson  2.7    io.reactivex:rxjava  1.1.8    com.squareup.retrofit2:retrofit  2.1.0    com.squareup.retrofit2:converter-gson  2.1.0    de.greenrobot:eventbus  3.0.0    com.google.dagger:dagger  2.0    ch.hsr:geohash  1.0.13    com.google.protobuf  3.0.0", 
            "title": "3rd-Party Dependencies"
        }, 
        {
            "location": "/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/#proguard_1", 
            "text": "If you see the message:  Can't find referenced class from the SDK , add these lines to your proguard configuration:  -dontwarn co.pointwise.proto.JournalProto$.**\n-dontwarn com.google.common.base.Function\n-dontwarn com.google.common.collect.Lists\n-dontwarn com.google.common.io.BaseEncoding", 
            "title": "Proguard"
        }, 
        {
            "location": "/#downgrading-min-sdk-version-to-api-v7", 
            "text": "Technically the minimum API version for the SDK is already v7. However, it depends on Google Play Services, which requires minimum API v9.  If you get an error saying:  Manifest merger failed : uses-sdk:minSdkVersion 7 cannot be smaller than version 9 declared in library [com.google.android.gms:play-services-location:9.4.0] Suggestion: use tools:overrideLibrary= com.google.android.gms  to force usage  Then add this line to the manifest of your application:  uses-sdk tools:overrideLibrary= com.google.android.gms, com.google.android.gms.base, com.google.android.gms.tasks, com.google.android.gms.gcm, com.google.android.gms.iid /", 
            "title": "Downgrading min SDK version to API v7"
        }, 
        {
            "location": "/unity/", 
            "text": "Locarta Unity SDK\n\n\n\n\n\n\n\n\nLatest Version\n\n\nSize\n\n\nMin Unity version\n\n\nRelease Date\n\n\n\n\n\n\n\n\n\n\n1.1.1\n\n\n5.7M\n\n\n5.x\n\n\n25/08/2016\n\n\n\n\n\n\n\n\nThe Locarta SDK can be integrated through a Unity plugin. \n\n\nWe currently support v5.x or higher of the Unity Framework.\n\n\nTo get started you will need (to be provided separately):\n\n  Publisher ID\n\n  Credentials to download the plugin  \n\n\nSetup\n\n\n\n\n1) Download and install plugin\n\n\nDownload the archive:\n\n\nhttps://static.locarta.co/locarta-sdk-unity/locarta-sdk-unity-1.1.1.zip\n\n\n\n\nWhen prompted for authentication, use the credentials mentioned above.\n\n\nOnce downloaded, unzip the contents to the folder \n./Assets/Plugins/Android\n\n\nFor example:\n\n\n# works from the project root if ./Assets/Plugins/Android foder already exists\nunzip locarta-sdk-unity-1.1.1.zip -d ./Assets/Plugins/Android\n\n\n\n\n2) Set publisher key\n\n\nAdd a file named \nlocarta.properties\n to the \n./Assets/Plugins/Android/assets\n folder.\n\n\nSet the file contents to the following:\n\n\npid=\nYOUR PUBLISHER ID\n\n\n\n\n\n3) Initialise SDK on App Start\n\n\npublic class MainScene : MonoBehaviour {\n\n    // Use the method for the initialisation    \n    void Start () {\n            // Get context\n            AndroidJavaClass unityPlayer = new AndroidJavaClass(\ncom.unity3d.player.UnityPlayer\n);\n            AndroidJavaObject activity = unityPlayer.GetStatic\nAndroidJavaObject\n(\ncurrentActivity\n);\n\n            // Initialize SDK\n            AndroidJavaClass locartaSdk = new AndroidJavaClass(\nco.locarta.sdk.LocartaSdk\n);\n            locartaSdk.CallStatic(\ninitialize\n, activity);\n        }\n    }   \n\n\n\n\n4) Obtain User Opt-In\n\n\nUsers must opt in to Locarta's market research programme for the SDK to start working. This can be done either:\n\n\na) Via an API call (if your application has its own agreement dialog or compliant privacy policy):\n\n\n// Accepting SDK agreements \nAndroidJavaClass locartaSdk = new AndroidJavaClass(\nco.locarta.sdk.LocartaSdk\n);\nlocartaSdk.CallStatic(\nsetAgreementAccepted\n, context, true);\n\n\n\n\nb) Via the default Locarta agreement dialog:\n\n\nif (!locartaSdk.CallStatic\nbool\n (\nisAgreementAccepted\n, activity)) {\n      activity.Call (\nrunOnUiThread\n, new AndroidJavaRunnable (() =\n { \n          locartaSdk.CallStatic\nAndroidJavaObject\n (\nshowAgreementDialog\n, activity);\n      }));\n  }\n\n\n\n\nIntegration Information\n\n\n\n\nThe set of minimal permissions embedded in the Locarta SDK is:\n\n\n\n\n\n\n\n\nPermission Name\n\n\nPlain English Name in App\n\n\nPlain German Name in App\n\n\n\n\n\n\n\n\n\n\nandroid.permission.INTERNET\n\n\nFull network access\n\n\nZugriff auf alle Netzwerke\n\n\n\n\n\n\nandroid.permission.ACCESS_COARSE_LOCATION\n\n\nApproximate location\n\n\nUngef\u00e4hrer Standort\n\n\n\n\n\n\nandroid.permission.ACCESS_FINE_LOCATION\n\n\nPrecise location\n\n\nGenauer Standort\n\n\n\n\n\n\nandroid.permission.ACCESS_NETWORK_STATE\n\n\nView network connections\n\n\nNetzwerkverbindungen abrufen\n\n\n\n\n\n\nandroid.permission.ACCESS_WIFI_STATE\n\n\nView wifi connections\n\n\nWLAN-Verbindungen abrufen\n\n\n\n\n\n\nandroid.permission.CHANGE_WIFI_STATE\n\n\nConnect and disconnect from Wi-Fi\n\n\nWLAN-Verbindungen herstellen und trennen\n\n\n\n\n\n\n\n\nPerformance Impact\n\n\nWe expect a battery impact of roughly 2-3%.\n\n\nNormally we use about 1MB/week of mobile data (depending on how long the phone is connected to wifi).", 
            "title": "Unity Guide"
        }, 
        {
            "location": "/unity/#locarta-unity-sdk", 
            "text": "Latest Version  Size  Min Unity version  Release Date      1.1.1  5.7M  5.x  25/08/2016     The Locarta SDK can be integrated through a Unity plugin.   We currently support v5.x or higher of the Unity Framework.  To get started you will need (to be provided separately):   Publisher ID   Credentials to download the plugin", 
            "title": "Locarta Unity SDK"
        }, 
        {
            "location": "/unity/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/unity/#1-download-and-install-plugin", 
            "text": "Download the archive:  https://static.locarta.co/locarta-sdk-unity/locarta-sdk-unity-1.1.1.zip  When prompted for authentication, use the credentials mentioned above.  Once downloaded, unzip the contents to the folder  ./Assets/Plugins/Android  For example:  # works from the project root if ./Assets/Plugins/Android foder already exists\nunzip locarta-sdk-unity-1.1.1.zip -d ./Assets/Plugins/Android", 
            "title": "1) Download and install plugin"
        }, 
        {
            "location": "/unity/#2-set-publisher-key", 
            "text": "Add a file named  locarta.properties  to the  ./Assets/Plugins/Android/assets  folder.  Set the file contents to the following:  pid= YOUR PUBLISHER ID", 
            "title": "2) Set publisher key"
        }, 
        {
            "location": "/unity/#3-initialise-sdk-on-app-start", 
            "text": "public class MainScene : MonoBehaviour {\n\n    // Use the method for the initialisation    \n    void Start () {\n            // Get context\n            AndroidJavaClass unityPlayer = new AndroidJavaClass( com.unity3d.player.UnityPlayer );\n            AndroidJavaObject activity = unityPlayer.GetStatic AndroidJavaObject ( currentActivity );\n\n            // Initialize SDK\n            AndroidJavaClass locartaSdk = new AndroidJavaClass( co.locarta.sdk.LocartaSdk );\n            locartaSdk.CallStatic( initialize , activity);\n        }\n    }", 
            "title": "3) Initialise SDK on App Start"
        }, 
        {
            "location": "/unity/#4-obtain-user-opt-in", 
            "text": "Users must opt in to Locarta's market research programme for the SDK to start working. This can be done either:  a) Via an API call (if your application has its own agreement dialog or compliant privacy policy):  // Accepting SDK agreements \nAndroidJavaClass locartaSdk = new AndroidJavaClass( co.locarta.sdk.LocartaSdk );\nlocartaSdk.CallStatic( setAgreementAccepted , context, true);  b) Via the default Locarta agreement dialog:  if (!locartaSdk.CallStatic bool  ( isAgreementAccepted , activity)) {\n      activity.Call ( runOnUiThread , new AndroidJavaRunnable (() =  { \n          locartaSdk.CallStatic AndroidJavaObject  ( showAgreementDialog , activity);\n      }));\n  }", 
            "title": "4) Obtain User Opt-In"
        }, 
        {
            "location": "/unity/#integration-information", 
            "text": "The set of minimal permissions embedded in the Locarta SDK is:     Permission Name  Plain English Name in App  Plain German Name in App      android.permission.INTERNET  Full network access  Zugriff auf alle Netzwerke    android.permission.ACCESS_COARSE_LOCATION  Approximate location  Ungef\u00e4hrer Standort    android.permission.ACCESS_FINE_LOCATION  Precise location  Genauer Standort    android.permission.ACCESS_NETWORK_STATE  View network connections  Netzwerkverbindungen abrufen    android.permission.ACCESS_WIFI_STATE  View wifi connections  WLAN-Verbindungen abrufen    android.permission.CHANGE_WIFI_STATE  Connect and disconnect from Wi-Fi  WLAN-Verbindungen herstellen und trennen", 
            "title": "Integration Information"
        }, 
        {
            "location": "/unity/#performance-impact", 
            "text": "We expect a battery impact of roughly 2-3%.  Normally we use about 1MB/week of mobile data (depending on how long the phone is connected to wifi).", 
            "title": "Performance Impact"
        }
    ]
}